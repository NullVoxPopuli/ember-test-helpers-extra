import Service from '@ember/service';
import { getContext } from '@ember/test-helpers';
export function getService(name) {
  const {
    owner
  } = getContext();
  const service = owner.lookup(`service:${name}`);
  return service;
}
export const stubService = (name, hash = {}) => {
  let stubbedService; // TODO: need to be able to use an extended service that uses services. :)

  if (hash instanceof Function) {
    stubbedService = hash;
  } else {
    stubbedService = Service.extend(hash);
  }

  let {
    owner
  } = getContext();
  let serviceName = `service:${name}`;
  owner.register(serviceName, stubbedService);
};
export default stubService;
/**
 * Doing a normal service stub will NOT work in a beforeEach
 * or anywhere else in your test because (instance) initializers
 * run before *any* user-land code.
 *
 * https://github.com/ember-cli/ember-cli-qunit/issues/203#issuecomment-366261794
 *
 * @public
 * @param {NestedHooks} hooks module hooks for the test context
 * @param {string} name the name of the service
 * @param {object} stub the overrides to apply to the service
 **/

export function setupServiceStub(hooks, name, stub) {
  let serviceName = `service:${name}`;
  let originals = {};
  hooks.beforeEach(function () {
    let {
      owner
    } = getContext();
    let service = owner.lookup(serviceName);

    if (!service) {
      throw new Error(`service '${name}' was not registered. You do not need setupServiceStub`);
    }

    let propertiesAndMethods = Object.keys(stub);
    propertiesAndMethods.forEach(key => {
      originals[key] = service[key];
      service[key] = stub[key];
    });
  });
  hooks.afterEach(function () {
    let {
      owner
    } = getContext();
    let service = owner.lookup(serviceName);
    let propertiesAndMethods = Object.keys(stub);
    propertiesAndMethods.forEach(key => {
      service[key] = originals[key];
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3NlcnZpY2VzLnRzIl0sIm5hbWVzIjpbIlNlcnZpY2UiLCJnZXRDb250ZXh0IiwiZ2V0U2VydmljZSIsIm5hbWUiLCJvd25lciIsInNlcnZpY2UiLCJsb29rdXAiLCJzdHViU2VydmljZSIsImhhc2giLCJzdHViYmVkU2VydmljZSIsIkZ1bmN0aW9uIiwiZXh0ZW5kIiwic2VydmljZU5hbWUiLCJyZWdpc3RlciIsInNldHVwU2VydmljZVN0dWIiLCJob29rcyIsInN0dWIiLCJvcmlnaW5hbHMiLCJiZWZvcmVFYWNoIiwiRXJyb3IiLCJwcm9wZXJ0aWVzQW5kTWV0aG9kcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiYWZ0ZXJFYWNoIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxPQUFQLE1BQW9CLGdCQUFwQjtBQUNBLFNBQVNDLFVBQVQsUUFBMkIscUJBQTNCO0FBRUEsT0FBTyxTQUFTQyxVQUFULENBQXVCQyxJQUF2QixFQUF3QztBQUM3QyxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBWUgsVUFBVSxFQUE1QjtBQUVBLFFBQU1JLE9BQU8sR0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWlCLFdBQVVILElBQUssRUFBaEMsQ0FBaEI7QUFFQSxTQUFPRSxPQUFQO0FBQ0Q7QUFFRCxPQUFPLE1BQU1FLFdBQVcsR0FBRyxDQUFDSixJQUFELEVBQWVLLElBQUksR0FBRyxFQUF0QixLQUE2QjtBQUN0RCxNQUFJQyxjQUFKLENBRHNELENBR3REOztBQUNBLE1BQUlELElBQUksWUFBWUUsUUFBcEIsRUFBOEI7QUFDNUJELElBQUFBLGNBQWMsR0FBR0QsSUFBakI7QUFDRCxHQUZELE1BRU87QUFDTEMsSUFBQUEsY0FBYyxHQUFHVCxPQUFPLENBQUNXLE1BQVIsQ0FBZUgsSUFBZixDQUFqQjtBQUNEOztBQUVELE1BQUk7QUFBRUosSUFBQUE7QUFBRixNQUFZSCxVQUFVLEVBQTFCO0FBQ0EsTUFBSVcsV0FBVyxHQUFJLFdBQVVULElBQUssRUFBbEM7QUFFQUMsRUFBQUEsS0FBSyxDQUFDUyxRQUFOLENBQWVELFdBQWYsRUFBNEJILGNBQTVCO0FBQ0QsQ0FkTTtBQWdCUCxlQUFlRixXQUFmO0FBRUE7Ozs7Ozs7Ozs7Ozs7QUFZQSxPQUFPLFNBQVNPLGdCQUFULENBQ0xDLEtBREssRUFFTFosSUFGSyxFQUdMYSxJQUhLLEVBSUw7QUFDQSxNQUFJSixXQUFXLEdBQUksV0FBVVQsSUFBSyxFQUFsQztBQUNBLE1BQUljLFNBQWMsR0FBRyxFQUFyQjtBQUVBRixFQUFBQSxLQUFLLENBQUNHLFVBQU4sQ0FBaUIsWUFBVztBQUMxQixRQUFJO0FBQUVkLE1BQUFBO0FBQUYsUUFBWUgsVUFBVSxFQUExQjtBQUNBLFFBQUlJLE9BQU8sR0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWFNLFdBQWIsQ0FBZDs7QUFFQSxRQUFJLENBQUNQLE9BQUwsRUFBYztBQUNaLFlBQU0sSUFBSWMsS0FBSixDQUNILFlBQVdoQixJQUFLLHdEQURiLENBQU47QUFHRDs7QUFFRCxRQUFJaUIsb0JBQW9CLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTixJQUFaLENBQTNCO0FBRUFJLElBQUFBLG9CQUFvQixDQUFDRyxPQUFyQixDQUE2QkMsR0FBRyxJQUFJO0FBQ2xDUCxNQUFBQSxTQUFTLENBQUNPLEdBQUQsQ0FBVCxHQUFpQm5CLE9BQU8sQ0FBQ21CLEdBQUQsQ0FBeEI7QUFFQW5CLE1BQUFBLE9BQU8sQ0FBQ21CLEdBQUQsQ0FBUCxHQUFlUixJQUFJLENBQUNRLEdBQUQsQ0FBbkI7QUFDRCxLQUpEO0FBS0QsR0FqQkQ7QUFtQkFULEVBQUFBLEtBQUssQ0FBQ1UsU0FBTixDQUFnQixZQUFXO0FBQ3pCLFFBQUk7QUFBRXJCLE1BQUFBO0FBQUYsUUFBWUgsVUFBVSxFQUExQjtBQUNBLFFBQUlJLE9BQU8sR0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWFNLFdBQWIsQ0FBZDtBQUVBLFFBQUlRLG9CQUFvQixHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sSUFBWixDQUEzQjtBQUVBSSxJQUFBQSxvQkFBb0IsQ0FBQ0csT0FBckIsQ0FBNkJDLEdBQUcsSUFBSTtBQUNsQ25CLE1BQUFBLE9BQU8sQ0FBQ21CLEdBQUQsQ0FBUCxHQUFlUCxTQUFTLENBQUNPLEdBQUQsQ0FBeEI7QUFDRCxLQUZEO0FBR0QsR0FURDtBQVVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlcnZpY2UgZnJvbSAnQGVtYmVyL3NlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gJ0BlbWJlci90ZXN0LWhlbHBlcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VydmljZTxUPihuYW1lOiBzdHJpbmcpOiBUIHtcbiAgY29uc3QgeyBvd25lciB9ID0gZ2V0Q29udGV4dCgpO1xuXG4gIGNvbnN0IHNlcnZpY2UgPSBvd25lci5sb29rdXA8VD4oYHNlcnZpY2U6JHtuYW1lfWApO1xuXG4gIHJldHVybiBzZXJ2aWNlO1xufVxuXG5leHBvcnQgY29uc3Qgc3R1YlNlcnZpY2UgPSAobmFtZTogc3RyaW5nLCBoYXNoID0ge30pID0+IHtcbiAgbGV0IHN0dWJiZWRTZXJ2aWNlO1xuXG4gIC8vIFRPRE86IG5lZWQgdG8gYmUgYWJsZSB0byB1c2UgYW4gZXh0ZW5kZWQgc2VydmljZSB0aGF0IHVzZXMgc2VydmljZXMuIDopXG4gIGlmIChoYXNoIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICBzdHViYmVkU2VydmljZSA9IGhhc2g7XG4gIH0gZWxzZSB7XG4gICAgc3R1YmJlZFNlcnZpY2UgPSBTZXJ2aWNlLmV4dGVuZChoYXNoKTtcbiAgfVxuXG4gIGxldCB7IG93bmVyIH0gPSBnZXRDb250ZXh0KCk7XG4gIGxldCBzZXJ2aWNlTmFtZSA9IGBzZXJ2aWNlOiR7bmFtZX1gO1xuXG4gIG93bmVyLnJlZ2lzdGVyKHNlcnZpY2VOYW1lLCBzdHViYmVkU2VydmljZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdHViU2VydmljZTtcblxuLyoqXG4gKiBEb2luZyBhIG5vcm1hbCBzZXJ2aWNlIHN0dWIgd2lsbCBOT1Qgd29yayBpbiBhIGJlZm9yZUVhY2hcbiAqIG9yIGFueXdoZXJlIGVsc2UgaW4geW91ciB0ZXN0IGJlY2F1c2UgKGluc3RhbmNlKSBpbml0aWFsaXplcnNcbiAqIHJ1biBiZWZvcmUgKmFueSogdXNlci1sYW5kIGNvZGUuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2VtYmVyLWNsaS9lbWJlci1jbGktcXVuaXQvaXNzdWVzLzIwMyNpc3N1ZWNvbW1lbnQtMzY2MjYxNzk0XG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtOZXN0ZWRIb29rc30gaG9va3MgbW9kdWxlIGhvb2tzIGZvciB0aGUgdGVzdCBjb250ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgc2VydmljZVxuICogQHBhcmFtIHtvYmplY3R9IHN0dWIgdGhlIG92ZXJyaWRlcyB0byBhcHBseSB0byB0aGUgc2VydmljZVxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU2VydmljZVN0dWIoXG4gIGhvb2tzOiBOZXN0ZWRIb29rcyxcbiAgbmFtZTogc3RyaW5nLFxuICBzdHViOiBPYmplY3Rcbikge1xuICBsZXQgc2VydmljZU5hbWUgPSBgc2VydmljZToke25hbWV9YDtcbiAgbGV0IG9yaWdpbmFsczogYW55ID0ge307XG5cbiAgaG9va3MuYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICBsZXQgeyBvd25lciB9ID0gZ2V0Q29udGV4dCgpO1xuICAgIGxldCBzZXJ2aWNlID0gb3duZXIubG9va3VwKHNlcnZpY2VOYW1lKTtcblxuICAgIGlmICghc2VydmljZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgc2VydmljZSAnJHtuYW1lfScgd2FzIG5vdCByZWdpc3RlcmVkLiBZb3UgZG8gbm90IG5lZWQgc2V0dXBTZXJ2aWNlU3R1YmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHByb3BlcnRpZXNBbmRNZXRob2RzID0gT2JqZWN0LmtleXMoc3R1Yik7XG5cbiAgICBwcm9wZXJ0aWVzQW5kTWV0aG9kcy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBvcmlnaW5hbHNba2V5XSA9IHNlcnZpY2Vba2V5XTtcblxuICAgICAgc2VydmljZVtrZXldID0gc3R1YltrZXldO1xuICAgIH0pO1xuICB9KTtcblxuICBob29rcy5hZnRlckVhY2goZnVuY3Rpb24oKSB7XG4gICAgbGV0IHsgb3duZXIgfSA9IGdldENvbnRleHQoKTtcbiAgICBsZXQgc2VydmljZSA9IG93bmVyLmxvb2t1cChzZXJ2aWNlTmFtZSk7XG5cbiAgICBsZXQgcHJvcGVydGllc0FuZE1ldGhvZHMgPSBPYmplY3Qua2V5cyhzdHViKTtcblxuICAgIHByb3BlcnRpZXNBbmRNZXRob2RzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIHNlcnZpY2Vba2V5XSA9IG9yaWdpbmFsc1trZXldO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdfQ==